use v6;
use Test;

use lib 'lib';
use Collective::LinkedList;

plan 6;

subtest 'empty linked list', {
    plan 4;

    my $linked := linkedlist;
    isa-ok $linked, Collective::LinkedList, 'my $linked := linkedlist';
    cmp-ok $linked.value, '=:=', IterationEnd, '$linked.value';
    cmp-ok $linked.next, '=:=', $linked, '$linked.next';
    nok $linked, '$linked.Bool';
};

subtest 'insert a value into a linked list', {
    plan 8;

    my $linked := linkedlist;
    my \value = Mu.new;
    my $linked2 = $linked.insert(value);
    isa-ok $linked2, Collective::LinkedList,
      'my $linked2 = $linked.insert(value)';

    cmp-ok $linked2.value, '=:=', value, '$linked2.value';
    cmp-ok $linked2.next, '=:=', $linked, '$linked2.next';
    ok $linked2, '$linked2.Bool';

    # assert that attributes are decontainerized
    my $value = Mu;
    my $linked3 = $linked2.insert($value);
    isa-ok $linked3, Collective::LinkedList,
      'my $linked3 = $linked2.insert($value)';

    $value .= new;
    cmp-ok $linked3.value, '=:=', Mu, '$linked3.value';
    cmp-ok $linked3.next, '=:=', $linked2<>, '$linked3.next';

    subtest 'linked list iterator', {
        my $iterator = $linked3.iterator;
        does-ok $iterator, Iterator, '$linked3.iterator';
        cmp-ok $iterator.pull-one, '=:=', Mu, '$iterator.pull-one';
        cmp-ok $iterator.pull-one, '=:=', value, '$iterator.pull-one';
        cmp-ok $iterator.pull-one, '=:=', IterationEnd,
          '$iterator.pull-one';
    }
}

subtest 'create a linked list from named arguments', {
    plan 8;

    my Mu $value;
    my $linked = Collective::LinkedList.new(:$value);
    isa-ok $linked, Collective::LinkedList,
      'my $linked = Collective::LinkedList.new(:$value)';

    # assert that $value is decontainerized
    $value .= new;
    cmp-ok $linked.value, '=:=', Mu, '$linked.value';
    cmp-ok $linked.next, 'eqv', linkedlist, '$linked.next';
    ok $linked, '$linked.Bool';

    # test again with a provided next node
    my $linked2 = Collective::LinkedList.new(:$value, next => $linked);
    isa-ok $linked2, Collective::LinkedList,
      'my $linked2 = Collective::LinkedList.new(:$value, next => $linked)';

    cmp-ok $linked2.value, '=:=', $value<>, '$linked2.value';
    cmp-ok $linked2.next, '=:=', $linked<>, '$linked2.next';

    subtest 'linked list iterator', {
        my $iterator = $linked2.iterator;
        does-ok $iterator, Iterator, '$linked2.iterator';
        cmp-ok $iterator.pull-one, '=:=', $value<>, '$iterator.pull-one';
        cmp-ok $iterator.pull-one, '=:=', Mu, '$iterator.pull-one';
        cmp-ok $iterator.pull-one, '=:=', IterationEnd,
          '$iterator.pull-one';
    }
}

subtest 'prepend to a linked list', {
    plan 8;

    my $linked = linkedlist;
    my ($a, $b) = Any.new;
    my $linked2 = $linked.prepend($a, $b);
    isa-ok $linked2, Collective::LinkedList,
      'my $linked2 = $linked.prepend($a, $b)';

    # assert that arguments are decontainerized
    $b .= new;
    is-deeply $linked2.list, ($a, Any), '$linked2.list';

    # test the :reversed adverb
    my $linked3 = $linked2.prepend($a, $b, :reversed);
    isa-ok $linked3, Collective::LinkedList,
      'my $linked3 = $linked2.prepend($a, $b, :reversed)';

    is-deeply $linked3.list, ($b, $a, $a, Any), '$linked3.list';

    # test with a single non-itemized Iterable
    my @values = $a, $b;
    my $linked4 = $linked2.prepend(@values, :reversed);
    isa-ok $linked4, Collective::LinkedList,
      'my $linked4 = $linked2.prepend(@values, :reversed)';

    is-deeply $linked4.list, ($b, $a, $a, Any), '$linked4.list';

    # assert that an itemized Iterable is treated as a single value
    my $linked5 = $linked2.prepend($@values, :reversed);
    isa-ok $linked5, Collective::LinkedList,
      'my $linked5 = $linked2.prepend($@values, :reversed)';

    is-deeply $linked5.list, ($@values, $a, Any), '$linked5.list';
}

subtest 'create a linked list from a single Iterable', {
    plan 6;

    my \value = Any.new;
    my @values = value, Any;
    my $linked := linkedlist @values;
    isa-ok $linked, Collective::LinkedList,
      'my $linked := linkedlist @values';

    # assert that values are decontainerized
    @values[0] .= new;
    is-deeply $linked.list, (value, Any), '$linked.list';

    # test the :reversed option
    my $linked2 = linkedlist @values, :reversed;
    isa-ok $linked2, Collective::LinkedList,
      'my $linked2 := linkedlist @values, :reversed';

    is-deeply $linked2.list, @values.reverse.list, '$linked2.list';

    # assert that an itemized Iterable is treated as a single value
    my $linked3 = linkedlist $@values;
    isa-ok $linked3, Collective::LinkedList,
      'my $linked3 = linkedlist $@values';

    is-deeply $linked3.list, ($@values,), '$linked3.list';
}

subtest 'create a linked list from multiple positional arguments', {
    plan 4;

    my \value = Any.new;
    my ($a, $b) = value, Any;
    my $linked := linkedlist $a, $b;
    isa-ok $linked, Collective::LinkedList,
      'my $linked := linkedlist $a, $b';

    # assert that values are decontainerized
    $a .= new;
    is-deeply $linked.list, (value, Any), '$linked.list';

    # test the :reversed option
    my $linked2 = linkedlist $a, $b, :reversed;
    isa-ok $linked2, Collective::LinkedList,
      'my $linked2 := linkedlist $a, $b, :reversed';

    is-deeply $linked2.list, ($b, $a), '$linked2.list';
}
